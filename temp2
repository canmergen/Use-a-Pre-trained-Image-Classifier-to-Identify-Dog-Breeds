import re, copy
from typing import List, Any, Tuple

def split_multi_role_boxes(role_blocks: List[Any]) -> List[Any]:
    """
    Input : role_blocks  -> (x,y,w,h, txt, role) alanlarına sahip kutular listesi
             - Dataclass/obj/dict olabilir. x,y,w,h,txt,role alanları bulunmalı.
    Output: role_blocks  -> Çoklu rol içeren kutular bölünmüş halde aynı tipte döner.

    Kural:
      - Aynı kutu içinde birden fazla rol yakalanırsa, rol ifadelerinin
        metin içindeki sırasına göre kutu yatayda bölünür.
      - Bölme sınırı, ardışık rol ifadelerinin yatay merkezlerinin orta noktasıdır.
      - 'role' alanı, ilgili parçanın ilk rol ifadesiyle set edilir.
    """

    # --- 1) Rol sözlüğü/regex
    ROLE_WORDS = [
        "DİVAN BAŞKANI", "TOPLANTI BAŞKANI",
        "OY TOPLAMA MEMURU", "TUTANAK YAZMANI", "YAZMAN",
        "YÖNETİM KURULU BAŞKANI", "YK BAŞKANI",
        "YÖNETİM KURULU ÜYESİ", "ÜYE",
        "MÜDÜR", "BAŞKAN"
    ]
    role_pat = re.compile(r"\b(" + "|".join([re.escape(w) for w in ROLE_WORDS]) + r")\b", re.I | re.U)

    # --- 2) Ortak alan erişim yardımcıları (obj/dict uyumlu)
    def getf(b, k, default=None):
        if isinstance(b, dict): return b.get(k, default)
        return getattr(b, k, default)

    def setf(b, k, v):
        if isinstance(b, dict): 
            b[k] = v
        else:
            setattr(b, k, v)

    def xyxy(b) -> Tuple[int,int,int,int]:
        x,y,w,h = getf(b,"x"),getf(b,"y"),getf(b,"w"),getf(b,"h")
        return x, y, x+w, y+h

    def new_like(b):
        """Input kutusunun tipini koruyarak kopya döndürür."""
        if isinstance(b, dict):
            return dict(b)
        return copy.deepcopy(b)

    # --- 3) Metin içindeki rol eşleşmelerini çıkar
    def extract_role_spans(text: str):
        spans = []
        for m in role_pat.finditer(text or ""):
            spans.append({"text": m.group(0), "span": m.span()})
        return spans

    # --- 4) Bölme sınırlarını belirle (merkezlerin ortası)
    def compute_split_xs(b, spans):
        """Her ardışık rol çifti için bir kesme x'i üretir."""
        if len(spans) < 2: 
            return []
        x, y, x2, y2 = xyxy(b)
        # Metin genişliğini kutu genişliğine izafe eden kaba bir harita:
        # string index (0..len) -> piksel (x..x2)
        t = getf(b,"txt") or ""
        L = max(len(t), 1)
        def char_to_x(idx):  # [0..L] -> [x..x2]
            ratio = min(max(idx / L, 0.0), 1.0)
            return int(x + ratio * (x2 - x))

        centers = []
        for s in spans:
            a,b_ = s["span"]
            c = (a + b_) / 2.0
            centers.append(char_to_x(c))
        split_xs = []
        for i in range(len(centers)-1):
            split_xs.append(int((centers[i] + centers[i+1]) / 2))
        # çiftlenmiş sınırlar (soldan sağa sıralı)
        split_xs = sorted(list({sx for sx in split_xs if x < sx < x2}))
        return split_xs

    # --- 5) Asıl akış
    output: List[Any] = []
    for b in role_blocks:
        txt = (getf(b,"txt") or "").strip()
        spans = extract_role_spans(txt)

        if len(spans) <= 1:
            # Tek rol: varsa role alanını normalize et, kutuyu direkt ekle
            if spans:
                nb = new_like(b)
                setf(nb, "role", spans[0]["text"])
                output.append(nb)
            else:
                output.append(b)
            continue

        # Çoklu rol: yatay böl
        x, y, x2, y2 = xyxy(b)
        split_xs = compute_split_xs(b, spans)
        # parça aralıkları: [x .. s1], [s1 .. s2], ..., [slast .. x2]
        cuts = [x] + split_xs + [x2]

        # Metin parçalama: karakter aralıklarını aynı oranda böl
        t = txt
        L = max(len(t), 1)
        def x_to_char(px):
            # x..x2 -> 0..L
            return int(round((px - x) / max(1, (x2-x)) * L))

        char_cuts = [0] + [min(max(x_to_char(px),0), L) for px in split_xs] + [L]

        for i in range(len(cuts)-1):
            px1, px2 = cuts[i], cuts[i+1]
            cx1, cx2 = char_cuts[i], char_cuts[i+1]
            piece_txt = t[cx1:cx2].strip()

            # bu parçadaki ilk rolü role alanına yaz
            piece_spans = extract_role_spans(piece_txt)
            piece_role  = piece_spans[0]["text"] if piece_spans else getf(b,"role")

            nb = new_like(b)
            setf(nb, "x", px1)
            setf(nb, "y", y)
            setf(nb, "w", max(1, px2 - px1))
            setf(nb, "h", y2 - y)
            setf(nb, "txt", piece_txt)
            setf(nb, "role", piece_role)
            output.append(nb)

    return output