import re, unicodedata

def _strip_by_type(name: str, company_type: str | None) -> str:
    if not name or not company_type:
        return (name or "").strip()
    CORE = {
        "anonim şirketi": r"(?:a\s*\.?\s*ş|aş|as|anonim\s+şirket[İIıi]?)",
        "limited şirketi": r"(?:ltd\s*\.?\s*şt[İIıi]|ltd\s*\.?\s*st[İIıi]|limited\s+şirket[İIıi]?)",
        "holding": r"(?:holding)",
        "kooperatif": r"(?:kooperatif)",
        "kolektif şirket": r"(?:kolektif\s+şirket[İIıi]?)",
        "adi komandit şirket": r"(?:adi\s+komandit\s+şirket[İIıi]?)",
        "sermayesi paylara bölünmüş komandit şirket": r"(?:sermayesi\s+paylara\s+bölünmüş\s+komandit\s+şirket[İIıi]?)",
        "komandit şirket": r"(?:komandit\s+şirket[İIıi]?)",
        "vakıf": r"(?:vakf[ıi]|vakif)",
        "dernek": r"(?:dernek)",
    }
    core = CORE.get((company_type or "").strip().lower())
    if not core: return name.strip()
    up = unicodedata.normalize("NFKC", name)
    pat = re.compile(
        rf"\b{core}\b(?:\s*[\.'’\"]?\s*(?:nin|nın|nun|nün|in|ın|un|ün|e|ye|de|te|den|ten))?.*$",
        flags=re.IGNORECASE
    )
    m = pat.search(up.lower())
    if not m: return name.strip()
    cut = m.start()
    cleaned = name[:cut].rstrip(" ,.-_’'\"")
    return re.sub(r"\s+"," ", cleaned).strip()

def _strip_any_known_type(name: str) -> str:
    if not name: return ""
    up = unicodedata.normalize("NFKC", name).upper()
    pats = [
        r"\bA\s*\.?\s*Ş\b", r"\bAŞ\b", r"\bAS\b", r"\bANON[İI]M\s+Ş[İI]RKET[İI]?\b",
        r"\bLTD\s*\.?\s*ŞT[İI]\b", r"\bLTD\s*\.?\s*ST[İI]\b", r"\bL[İI]M[İI]TED\s+Ş[İI]RKET[İI]?\b",
        r"\bHOLD[İI]NG\b", r"\bKOOPERAT[İI]F\b",
        r"\bKOLEKT[İI]F\s+Ş[İI]RKET[İI]?\b",
        r"\bAD[İI]\s+KOMAND[İI]T\s+Ş[İI]RKET[İI]?\b",
        r"\bSERMAYES[İI]\s+PAYLARA\s+BÖLÜNMÜŞ\s+KOMAND[İI]T\s+Ş[İI]RKET[İI]?\b",
        r"\bKOMAND[İI]T\s+Ş[İI]RKET[İI]?\b",
        r"\bVAK(I|İ)F\b", r"\bDERNEK\b",
    ]
    big = re.compile("|".join(pats))
    m = big.search(up)
    if not m: return name.strip()
    cut = m.start()
    cleaned = name[:cut].rstrip(" ,.-_’'\"")
    return re.sub(r"\s+"," ", cleaned).strip()

def _strip_after_generic_company_word(name: str) -> str:
    if not name: return ""
    tr_map = str.maketrans({"ş":"s","Ş":"S","ı":"i","İ":"I","ö":"o","Ö":"O","ğ":"g","Ğ":"G","ü":"u","Ü":"U","ç":"c","Ç":"C"})
    norm = unicodedata.normalize("NFKC", name).translate(tr_map)
    pat = re.compile(r"\bS\s*I\s*R\s*K\s*E\s*T(?:[İI])?(?:NIN|NIN|NUN|NUN|IN|IN|UN|UN)?\b", re.IGNORECASE)
    m = pat.search(norm.upper())
    if not m:
        return name.strip()
    cut = m.start()
    cleaned = name[:cut].rstrip(" ,.-_’'\"")
    return re.sub(r"\s+"," ", cleaned).strip()

# YENİ: Şirket kelimesinden ÖNCE kalan kuyruktaki tür kelimelerini de sök
def _strip_trailing_type_words(name: str) -> str:
    """
    'şirket'ten önce kalmış olsa bile sonda duran 'ANONİM / LİMİTED / HOLDİNG / ...'
    parçalarını ve kısaltmalarını (A.Ş., LTD. ŞTİ.) temizler.
    """
    if not name: return ""
    up = unicodedata.normalize("NFKC", name).upper()
    # en soldaki eşleşmeye göre kes (farklı varyantlardan hangisi önceyse)
    pats = [
        r"\bANON[İI]M\b.*$", r"\bL[İI]M[İI]TED\b.*$", r"\bHOLD[İI]NG\b.*$", r"\bKOOPERAT[İI]F\b.*$",
        r"\bKOMAND[İI]T\b.*$", r"\bKOLEKT[İI]F\b.*$",
        r"\bA\s*\.?\s*Ş\b.*$", r"\bLTD\s*\.?\s*ŞT[İI]\b.*$", r"\bLTD\s*\.?\s*ST[İI]\b.*$",
    ]
    first = None
    for p in pats:
        m = re.search(p, up)
        if m:
            first = m if (first is None or m.start() < first.start()) else first
    if not first:
        return name.strip()
    cut = first.start()
    cleaned = name[:cut].rstrip(" ,.-_’'\"")
    return re.sub(r"\s+"," ", cleaned).strip()

def clean_company_name(company_name: str, company_type: str | None) -> str:
    """
    1) Türden itibaren kes (biliniyorsa)
    2) Tür bilinmiyorsa bilinen varyantlara göre kes
    3) 'ŞİRKET' çekirdeğinden itibaren kes
    4) Kalan kuyrukta tür kelimeleri varsa onları da sök
    """
    out = (company_name or "").strip()
    if not out:
        return ""

    out1 = _strip_by_type(out, company_type)
    if out1 == out:
        out1 = _strip_any_known_type(out)

    out2 = _strip_after_generic_company_word(out1)

    # >>> İSTEDİĞİN EK ADIM: 'anonim/limited/...' kuyruk temizliği
    out3 = _strip_trailing_type_words(out2)

    return out3