import cv2, fitz, numpy as np
from pathlib import Path
from PIL import Image
Image.MAX_IMAGE_PIXELS = None

try:
    import tifffile as tiff
    _HAS_TIFF = True
except Exception:
    _HAS_TIFF = False


def convert_document_with_rotation(
    path: str,
    *,
    pdf_dpi: int = 400,
    osd_tc=None,
    debug: bool = False
):
    """
    PDF/TIFF dosyasını sayfa bazında BGR imajlara çevirir.
    EXIF + OSD (0/90/180/270) + Skew düzeltmesini uygular.
    Return: {
        "path": ...,
        "page_count": N,
        "pages": [ { "image": np.ndarray, ...meta... }, ... ],
        "metas": [ meta, ... ]
    }
    """

    # ---------- Helpers ----------
    def rotate_image(bgr, angle):
        if abs(angle) < 0.01:
            return bgr
        (h, w) = bgr.shape[:2]
        M = cv2.getRotationMatrix2D((w//2, h//2), angle, 1.0)
        return cv2.warpAffine(bgr, M, (w, h), flags=cv2.INTER_LINEAR,
                              borderMode=cv2.BORDER_REPLICATE)

    def osd_detect(bgr):
        if osd_tc is None:
            return 0, 0.0
        try:
            pil = Image.fromarray(cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB))
            raw = osd_tc.get_osd_ocr(pil, config='', model='best', output_type='dict')
            d = raw.get("dict", raw)
            deg = int(d.get("rotate", d.get("rotation", d.get("rot", 0))) or 0) % 360
            conf = float(d.get("orientation_conf", d.get("conf", d.get("confidence", 0.0))) or 0.0)
            return deg, conf
        except Exception:
            return 0, 0.0

    def robust_skew(bgr, max_angle=10.0):
        try:
            gray = cv2.cvtColor(bgr, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 50, 150)
            lines = cv2.HoughLines(edges, 1, np.pi/180, 200)
            if lines is None:
                return 0.0
            angles = []
            for rho, theta in lines[:,0]:
                ang = np.degrees(theta) - 90
                if abs(ang) <= max_angle:
                    angles.append(ang)
            if angles:
                return float(np.median(angles))
            return 0.0
        except Exception:
            return 0.0

    def decide_rotation(osd_deg, skew_deg):
        total = 0.0
        # OSD bazlı karar (conf değerine bakmadan)
        if osd_deg in (90, 180, 270):
            if osd_deg == 90: total += -90
            if osd_deg == 180: total += 180
            if osd_deg == 270: total += 90
        # Skew sadece küçük açı düzeltmesi
        if skew_deg is not None and abs(skew_deg) > 0.2 and abs(skew_deg) < 10:
            total += skew_deg
        return total

    def imshow_before_after(before, after, title=""):
        if not debug: return
        import matplotlib.pyplot as plt
        plt.figure(figsize=(12,6))
        ax1 = plt.subplot(1,2,1); ax1.imshow(cv2.cvtColor(before, cv2.COLOR_BGR2RGB))
        ax1.set_title("Before"); ax1.axis("off")
        ax2 = plt.subplot(1,2,2); ax2.imshow(cv2.cvtColor(after, cv2.COLOR_BGR2RGB))
        ax2.set_title("After"); ax2.axis("off")
        plt.suptitle(title); plt.show()

    def ensure_bgr(arr, photometric=None):
        if arr.ndim == 2:
            return cv2.cvtColor(arr.astype(np.uint8), cv2.COLOR_GRAY2BGR)
        if arr.ndim == 3 and arr.shape[2] == 3:
            return cv2.cvtColor(arr.astype(np.uint8), cv2.COLOR_RGB2BGR)
        if arr.ndim == 3 and arr.shape[2] == 4:
            return cv2.cvtColor(arr[...,:3].astype(np.uint8), cv2.COLOR_RGB2BGR)
        return np.array(arr, dtype=np.uint8)

    # ---------- Main ----------
    p = Path(path).resolve()
    out = {"path": str(p), "pages": [], "metas": []}

    # ---- PDF ----
    if p.suffix.lower() == ".pdf":
        doc = fitz.open(p.as_posix())
        try:
            for i in range(doc.page_count):
                page = doc.load_page(i)
                pix = page.get_pixmap(matrix=fitz.Matrix(pdf_dpi/72, pdf_dpi/72), alpha=False)
                arr = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.h, pix.w, pix.n)
                bgr = cv2.cvtColor(arr, cv2.COLOR_RGB2BGR)

                osd_deg, osd_conf = osd_detect(bgr)
                skew_deg = robust_skew(bgr)
                rot_angle = decide_rotation(osd_deg, skew_deg)
                bgr_rot = rotate_image(bgr, rot_angle)

                imshow_before_after(bgr, bgr_rot, f"PDF Page {i}")

                meta = {
                    "page_index": i,
                    "shape": bgr_rot.shape,
                    "osd_raw_deg": osd_deg,
                    "osd_confidence": osd_conf,
                    "skew_deg": skew_deg,
                    "rotation_applied_deg": rot_angle
                }
                out["pages"].append({"image": bgr_rot, **meta})
                out["metas"].append(meta)
        finally:
            doc.close()

    # ---- TIFF ----
    elif p.suffix.lower() in (".tif", ".tiff"):
        pages = []
        if _HAS_TIFF:
            with tiff.TiffFile(p.as_posix()) as tf:
                for i, pg in enumerate(tf.pages):
                    arr = pg.asarray()
                    bgr = ensure_bgr(arr, photometric=str(getattr(pg, "photometric", "")))

                    osd_deg, osd_conf = osd_detect(bgr)
                    skew_deg = robust_skew(bgr)
                    rot_angle = decide_rotation(osd_deg, skew_deg)
                    bgr_rot = rotate_image(bgr, rot_angle)

                    imshow_before_after(bgr, bgr_rot, f"TIFF Page {i}")

                    meta = {
                        "page_index": i,
                        "shape": bgr_rot.shape,
                        "osd_raw_deg": osd_deg,
                        "osd_confidence": osd_conf,
                        "skew_deg": skew_deg,
                        "rotation_applied_deg": rot_angle
                    }
                    pages.append({"image": bgr_rot, **meta})
                    out["metas"].append(meta)
        else:
            with Image.open(p.as_posix()) as im:
                n = getattr(im, "n_frames", 1)
                for i in range(n):
                    im.seek(i)
                    arr = np.array(im.convert("RGB"))
                    bgr = ensure_bgr(arr)

                    osd_deg, osd_conf = osd_detect(bgr)
                    skew_deg = robust_skew(bgr)
                    rot_angle = decide_rotation(osd_deg, skew_deg)
                    bgr_rot = rotate_image(bgr, rot_angle)

                    imshow_before_after(bgr, bgr_rot, f"TIFF Page {i}")

                    meta = {
                        "page_index": i,
                        "shape": bgr_rot.shape,
                        "osd_raw_deg": osd_deg,
                        "osd_confidence": osd_conf,
                        "skew_deg": skew_deg,
                        "rotation_applied_deg": rot_angle
                    }
                    out["metas"].append(meta)
                    pages.append({"image": bgr_rot, **meta})
        out["pages"] = pages

    else:
        raise ValueError(f"Unsupported file type: {p.suffix}")

    out["page_count"] = len(out["pages"])
    return out