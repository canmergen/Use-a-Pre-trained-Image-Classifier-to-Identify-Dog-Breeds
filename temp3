# doc_to_images.py
# -*- coding: utf-8 -*-

from __future__ import annotations

from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple, Union

import numpy as np
import cv2
import fitz  # PyMuPDF
from PIL import Image
Image.MAX_IMAGE_PIXELS = None

try:
    import tifffile as tiff
    _HAS_TIFFFILE = True
except Exception:
    _HAS_TIFFFILE = False


def convert_document_to_images(
    path: Union[str, Path],
    *,
    pdf_dpi: int = 600,
    apply_orientation: bool = True,
    debug: bool = False
) -> Dict[str, Any]:
    """
    PDF/TIFF dosyasını sayfa sayfa imajlara çevirir (hiçbir kırpma yok).
    - PDF: her zaman tam sayfa raster, pdf_dpi çözünürlükte
    - TIFF: ham piksel + orientation uygular
    - debug=True → sayfaları tek tek ekranda gösterir
    """

    def _imshow(img: np.ndarray, title: str):
        if not debug:
            return
        import matplotlib.pyplot as plt
        plt.figure(figsize=(10, 10))
        if img.ndim == 2:
            plt.imshow(img, cmap="gray")
        else:
            plt.imshow(img)
        plt.title(title)
        plt.axis("off")
        plt.show()

    def _apply_exif_orientation(arr: np.ndarray, orient: Optional[int]) -> np.ndarray:
        if orient is None:
            return arr
        if orient == 3:
            return np.rot90(arr, 2)
        if orient == 6:
            return np.rot90(arr, 3)
        if orient == 8:
            return np.rot90(arr, 1)
        return arr

    def _normalize_dpi_tuple(dpi_xy) -> Optional[Tuple[int, int]]:
        if dpi_xy is None:
            return None
        try:
            x, y = int(dpi_xy[0]), int(dpi_xy[1])
            if x <= 1 and y <= 1:
                return None
            return (x, y)
        except Exception:
            return None

    p = Path(path).expanduser().resolve()
    ext = p.suffix.lower()
    out: Dict[str, Any] = {"doc_str": None, "path": str(p), "page_count": 0, "pages": []}

    # ---- PDF ----
    if ext == ".pdf":
        out["doc_str"] = "pdf_doc"
        doc = fitz.open(p.as_posix())
        try:
            for i in range(doc.page_count):
                page = doc.load_page(i)
                scale = pdf_dpi / 72.0
                pix = page.get_pixmap(
                    matrix=fitz.Matrix(scale, scale),
                    alpha=True,
                    colorspace=fitz.csRGB
                )
                buf = np.frombuffer(pix.samples, dtype=np.uint8)
                if pix.n == 1:
                    img = buf.reshape(pix.h, pix.w).copy(); cs = "GRAY"
                elif pix.n == 3:
                    img = buf.reshape(pix.h, pix.w, 3).copy(); cs = "RGB"
                else:
                    img = buf.reshape(pix.h, pix.w, pix.n)[:, :, :4].copy(); cs = "RGBA"

                _imshow(img, f"PDF Sayfa {i} | {cs} | dpi={pdf_dpi} | {img.shape}")
                out["pages"].append({
                    "index": i,
                    "dpi": pdf_dpi,
                    "shape": tuple(img.shape),
                    "dtype": str(img.dtype),
                    "mode": cs,
                    "colorspace": cs,
                    "source": "pdf_raster",
                    "image": img
                })
        finally:
            doc.close()
        out["page_count"] = len(out["pages"])

    # ---- TIFF ----
    elif ext in (".tif", ".tiff"):
        out["doc_str"] = "tiff_doc"

        def _tiff_with_tifffile(pth: Path) -> List[Dict[str, Any]]:
            pages: List[Dict[str, Any]] = []
            with tiff.TiffFile(pth.as_posix()) as tf:
                for i, pg in enumerate(tf.pages):
                    arr = pg.asarray()
                    orient = None
                    if apply_orientation:
                        try:
                            ori_tag = pg.tags.get("Orientation")
                            if ori_tag is not None:
                                orient = int(ori_tag.value)
                        except Exception:
                            orient = None
                    if apply_orientation and orient in (3, 6, 8):
                        arr = _apply_exif_orientation(arr, orient)

                    dpi_xy = None
                    xr, yr, ru = pg.tags.get("XResolution"), pg.tags.get("YResolution"), pg.tags.get("ResolutionUnit")
                    if xr and yr and ru:
                        def _rat(tag):
                            num, den = tag.value
                            return float(num) / float(den)
                        x, y = _rat(xr), _rat(yr)
                        if ru.value == 3:
                            x *= 2.54; y *= 2.54
                        dpi_xy = _normalize_dpi_tuple((int(round(x)), int(round(y))))

                    if arr.ndim == 2:
                        mode = "GRAY"
                    elif arr.ndim == 3 and arr.shape[2] == 3:
                        mode = "RGB"
                    elif arr.ndim == 3 and arr.shape[2] == 4:
                        mode = "RGBA"
                    else:
                        mode = "UNKNOWN"

                    _imshow(arr, f"TIFF Sayfa {i} | tifffile | {mode} | dpi={dpi_xy} | {arr.shape}")
                    pages.append({
                        "index": i, "dpi": dpi_xy, "shape": tuple(arr.shape),
                        "dtype": str(arr.dtype), "mode": mode,
                        "colorspace": mode, "source": "tifffile", "image": arr
                    })
            return pages

        def _tiff_with_pillow(pth: Path) -> List[Dict[str, Any]]:
            pages: List[Dict[str, Any]] = []
            with Image.open(pth.as_posix()) as im:
                n = getattr(im, "n_frames", 1)
                for i in range(n):
                    im.seek(i)
                    frame = im.copy()
                    orient = None
                    if apply_orientation:
                        try:
                            exif = frame.getexif()
                            orient = int(exif.get(274) or 1) if exif else 1
                        except Exception:
                            orient = 1
                    arr = np.array(frame)
                    if apply_orientation and orient in (3, 6, 8):
                        arr = _apply_exif_orientation(arr, orient)
                    dpi_xy = frame.info.get("dpi")
                    dpi_xy = _normalize_dpi_tuple(dpi_xy if isinstance(dpi_xy, (tuple, list)) else None)

                    mode = frame.mode
                    _imshow(arr, f"TIFF Sayfa {i} | pillow | {mode} | dpi={dpi_xy} | {arr.shape}")
                    pages.append({
                        "index": i, "dpi": dpi_xy, "shape": tuple(arr.shape),
                        "dtype": str(arr.dtype), "mode": mode,
                        "colorspace": mode, "source": "pillow", "image": arr
                    })
            return pages

        if _HAS_TIFFFILE:
            try:
                out["pages"] = _tiff_with_tifffile(p)
            except Exception:
                out["pages"] = _tiff_with_pillow(p)
        else:
            out["pages"] = _tiff_with_pillow(p)

        out["page_count"] = len(out["pages"])

    else:
        raise ValueError(f"Unsupported extension: {ext}")

    return out