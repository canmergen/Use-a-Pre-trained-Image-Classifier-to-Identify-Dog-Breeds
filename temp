import re, unicodedata
from typing import Optional

def _map_type_to_canonical(type_text: str) -> Optional[str]:
    if not type_text:
        return None

    # --- inline helpers ---
    def upper_tr(s: str) -> str:
        mp = {"i":"İ","ı":"I","ş":"Ş","ğ":"Ğ","ü":"Ü","ö":"Ö","ç":"Ç"}
        return "".join(mp.get(ch, ch.upper()) for ch in s)

    def nfkc_strip(s: str) -> str:
        s = unicodedata.normalize("NFKC", s or "")
        # görünmez boşluklar
        s = s.replace("\u200b"," ").replace("\xa0"," ")
        return re.sub(r"\s+", " ", s).strip()

    def spaced(tok: str) -> str:
        # "ŞİRKET" -> "Ş\s*İ\s*R\s*K\s*E\s*T"
        parts = [re.escape(ch) for ch in tok if not ch.isspace()]
        return r"\s*".join(parts)

    u = upper_tr(nfkc_strip(type_text))
    # ASCII-benzeri kopya (son emniyet)
    u_ascii = (
        u.replace("İ","I").replace("Ş","S").replace("Ğ","G")
         .replace("Ü","U").replace("Ö","O").replace("Ç","C")
    )

    # Ekler ve apostroflar: ’ ' ` ´ + NIN/NİN/NUN/NÜN/IN/İN/UN/ÜN
    GEN_SUFFIX = r"(?:\s*[’'`´\"“”]?\s*(?:NIN|NİN|NUN|NÜN|IN|İN|UN|ÜN))?"

    # Çekirdek desenler (kısaltma + ek toleransı DAHİL)
    AS_ABBR   = r"(?:A\.?\s*Ş|A\.?\s*S|AŞ|AS)" + GEN_SUFFIX
    ANON_FULL = r"ANON[İI]M\s+" + spaced("ŞİRKET") + GEN_SUFFIX
    LTD_BLOCK = (
        r"(?:LTD\s*\.?\s*ŞT[İI]|LTD\s*\.?\s*ST[İI]|"
        r"L[İI]M[İI]TED\s+" + spaced("ŞİRKET") + r")" + GEN_SUFFIX
    )
    SIRKET    = spaced("ŞİRKET") + GEN_SUFFIX
    HOLD_CORE = r"HOLD[İI]NG"
    KOOP_CORE = r"KOOPERAT[İI]F"
    KOL_CORE  = r"KOLEKT[İI]F\s+" + SIRKET
    ADKOM     = r"AD[İI]\s+KOMAND[İI]T\s+" + SIRKET
    SPBK      = r"SERMAYES[İI]\s+PAYLARA\s+BÖLÜNMÜŞ\s+KOMAND[İI]T\s+" + SIRKET
    KOM       = r"KOMAND[İI]T\s+" + SIRKET
    VAKIF     = r"VAKF[Iİ]|VAKIF"
    DERNEK    = r"DERNEK"

    RULES = [
        (rf"(?:\b|^)(?:{AS_ABBR}|{ANON_FULL})(?:\b|$)", "ANONİM ŞİRKETİ"),
        (rf"(?:\b|^){LTD_BLOCK}(?:\b|$)",               "LİMİTED ŞİRKETİ"),
        (rf"(?:\b|^){HOLD_CORE}(?:\b|$)",               "HOLDİNG"),
        (rf"(?:\b|^){KOOP_CORE}(?:\b|$)",               "KOOPERATİF"),
        (rf"(?:\b|^){KOL_CORE}(?:\b|$)",                "KOLEKTİF ŞİRKET"),
        (rf"(?:\b|^){ADKOM}(?:\b|$)",                   "ADİ KOMANDİT ŞİRKET"),
        (rf"(?:\b|^){SPBK}(?:\b|$)",                    "SERMAYESİ PAYLARA BÖLÜNMÜŞ KOMANDİT ŞİRKET"),
        (rf"(?:\b|^){KOM}(?:\b|$)",                     "KOMANDİT ŞİRKET"),
        (rf"(?:\b|^){VAKIF}(?:\b|$)",                   "VAKIF"),
        (rf"(?:\b|^){DERNEK}(?:\b|$)",                  "DERNEK"),
    ]

    # 1) Geniş desenler (apostrof + ek toleranslı)
    for pat, label in RULES:
        if re.search(pat, u, flags=re.IGNORECASE):
            return label

    # 2) Emniyet: ASCII-normalize üzerinde kısa varyantlar (apostrof ve ekleri kaldırarak)
    u_ascii_flat = re.sub(r"[\s\.\-_/’'`´]+", "", u_ascii)
    if re.search(r"(?:AS|AŞ|ANONIMSIRKET)(?:NIN|NIN|NUN|NUN|IN|IN|UN|UN)?", u_ascii_flat):
        return "ANONİM ŞİRKETİ"
    if re.search(r"(?:LTDSTI|LTDSTI|LIMITEDSIRKET)(?:NIN|NUN|IN|UN)?", u_ascii_flat):
        return "LİMİTED ŞİRKETİ"
    if "HOLDING" in u_ascii_flat:
        return "HOLDİNG"
    if "KOOPERATIF" in u_ascii_flat:
        return "KOOPERATİF"
    if re.search(r"KOLEKTIF.*SIRKET", u_ascii_flat):
        return "KOLEKTİF ŞİRKET"
    if re.search(r"ADIKOMANDIT.*SIRKET", u_ascii_flat):
        return "ADİ KOMANDİT ŞİRKET"
    if re.search(r"SERMAYESIPAYLARABOLUNMUSKOMANDIT.*SIRKET", u_ascii_flat):
        return "SERMAYESİ PAYLARA BÖLÜNMÜŞ KOMANDİT ŞİRKET"
    if re.search(r"KOMANDIT.*SIRKET", u_ascii_flat):
        return "KOMANDİT ŞİRKET"
    if "VAKIF" in u_ascii_flat:
        return "VAKIF"
    if "DERNEK" in u_ascii_flat:
        return "DERNEK"

    return None