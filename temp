# Re-importing after code execution state reset
import cv2
import numpy as np
import os
from matplotlib import pyplot as plt
from typing import List, Tuple

def extract_table_only(
    image: np.ndarray,
    debug: bool = False,
    save_path: str = None,
    min_table_height_ratio: float = 0.1,
    max_table_height_ratio: float = 0.8
) -> np.ndarray:
    """
    Extract only the table area from a document image.
    
    Args:
        image (np.ndarray): Input color image.
        debug (bool): Whether to show intermediate results.
        save_path (str): If provided, saves the cropped table image.
        min_table_height_ratio (float): Minimum height ratio relative to image height for table region.
        max_table_height_ratio (float): Maximum height ratio to filter out signature area.
    
    Returns:
        np.ndarray: Cropped table image.
    """
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)

    # Adaptive thresholding to highlight lines
    thresh = cv2.adaptiveThreshold(
        blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 15, 10
    )

    # Detect horizontal and vertical lines
    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))
    horizontal_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)
    vertical_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, vertical_kernel, iterations=2)

    table_mask = cv2.add(horizontal_lines, vertical_lines)

    # Find contours on the table mask
    contours, _ = cv2.findContours(table_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    image_height = image.shape[0]
    min_height = int(image_height * min_table_height_ratio)
    max_height = int(image_height * max_table_height_ratio)
    
    table_candidates: List[Tuple[int, int, int, int]] = []

    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        if min_height < h < max_height:
            table_candidates.append((x, y, w, h))

    if not table_candidates:
        raise ValueError("No valid table region found.")

    # Select the largest table region by area
    x, y, w, h = max(table_candidates, key=lambda b: b[2] * b[3])
    table_crop = image[y:y+h, x:x+w]

    if debug:
        debug_img = image.copy()
        for (x_, y_, w_, h_) in table_candidates:
            cv2.rectangle(debug_img, (x_, y_), (x_ + w_, y_ + h_), (0, 255, 0), 2)
        plt.figure(figsize=(12, 6))
        plt.imshow(cv2.cvtColor(debug_img, cv2.COLOR_BGR2RGB))
        plt.title("Detected Table Candidates")
        plt.axis("off")
        plt.show()

    if save_path:
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        cv2.imwrite(save_path, table_crop)

    return table_crop

# Load the uploaded image for test
input_path = "/mnt/data/IMG_4A0AB666-33F8-4A35-8F44-E37D4F4A4EF8.jpeg"
image = cv2.imread(input_path)

# Extract only the table part
table_image = extract_table_only(image, debug=True, save_path="/mnt/data/cropped_table.jpg")