
import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from io import BytesIO
import base64
import requests

def extract_table_region(img, debug=False):
    inverted = 255 - img.copy()
    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 30))
    vertical_lines = cv2.morphologyEx(inverted, cv2.MORPH_OPEN, vertical_kernel, iterations=1)
    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (30, 1))
    horizontal_lines = cv2.morphologyEx(inverted, cv2.MORPH_OPEN, horizontal_kernel, iterations=1)
    table_mask = cv2.add(horizontal_lines, vertical_lines)
    contours, _ = cv2.findContours(table_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    candidate_boxes = []
    for c in contours:
        x, y, w, h = cv2.boundingRect(c)
        aspect_ratio = w / (h + 1e-5)
        if w * h > 10000 and 3 <= aspect_ratio <= 8 and h > 50:
            candidate_boxes.append((x, y, w, h))

    if not candidate_boxes:
        print("Uygun tablo kutusu bulunamadı.")
        return None

    x, y, w, h = sorted(candidate_boxes, key=lambda b: b[2]*b[3], reverse=True)[0]
    cropped = img[y:y+h, x:x+w]

    if debug:
        plt.figure(figsize=(12, 6))
        plt.imshow(cropped, cmap='gray')
        plt.title("Daha Sağlıklı Kırpılmış Tablo")
        plt.axis("off")
        plt.show()

    return cropped

def extract_cells(table_img, debug=False):
    gray = cv2.cvtColor(table_img, cv2.COLOR_BGR2GRAY) if len(table_img.shape) == 3 else table_img
    _, binary = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY_INV)

    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, table_img.shape[0] // 25))
    vertical_lines = cv2.morphologyEx(binary, cv2.MORPH_OPEN, vertical_kernel)

    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (table_img.shape[1] // 25, 1))
    horizontal_lines = cv2.morphologyEx(binary, cv2.MORPH_OPEN, horizontal_kernel)

    table_mask = cv2.add(horizontal_lines, vertical_lines)
    contours, _ = cv2.findContours(table_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    boxes = []
    for c in contours:
        x, y, w, h = cv2.boundingRect(c)
        if w >= 20 and h > 10:
            boxes.append((x, y, w, h))

    boxes = sorted(boxes, key=lambda b: (b[1] // 10, b[0]))

    if debug:
        vis = table_img.copy()
        for x, y, w, h in boxes:
            cv2.rectangle(vis, (x, y), (x + w, y + h), (0, 0, 255), 1)
        plt.figure(figsize=(12, 6))
        plt.imshow(vis, cmap='gray')
        plt.title("Tespit Edilen Hücreler")
        plt.axis("off")
        plt.show()

    return boxes

def image_to_base64_jpeg(image: Image.Image) -> str:
    buffer = BytesIO()
    max_dim = max(image.size)
    if max_dim > 1000:
        scale = 1000 / max_dim
        new_size = (int(image.size[0] * scale), int(image.size[1] * scale))
        image = image.resize(new_size, Image.LANCZOS)

    image.save(buffer, format="JPEG", quality=70)
    image_bytes = buffer.getvalue()
    return base64.b64encode(image_bytes).decode("utf-8")

def get_ocr_from_image(roi_image: Image.Image, tesseract_client_url: str, debug: bool = False):
    try:
        image_base64 = image_to_base64_jpeg(roi_image)
        if debug:
            print(f"[INFO] Görsel çözünürlüğü: {roi_image.size}")
            print(f"[INFO] Base64 uzunluğu: {len(image_base64)}")
        response = requests.post(tesseract_client_url, json={"image": image_base64})
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"[OCR ERROR] {e}")
        return {}

def ocr_cells_with_client(image, boxes, tesseract_client, debug=False):
    results = []
    for i, (x, y, w, h) in enumerate(boxes):
        roi_pil = Image.fromarray(image[y:y+h, x:x+w])
        try:
            ocr_result = get_ocr_from_image(roi_pil, tesseract_client, debug=debug)
            if ocr_result and "text" in ocr_result:
                text = ocr_result["text"].strip()
            else:
                print(f"[WARNING] Boş sonuç geldi. index: {i}")
                text = ""
        except Exception as e:
            print(f"[OCR ERROR] Hücre {i} hata verdi: {str(e)}")
            text = ""
        results.append(((x, y), text))
    return results