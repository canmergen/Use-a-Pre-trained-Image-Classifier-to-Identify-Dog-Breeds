import cv2
import numpy as np
from typing import List

# ---------- Senin yardımcıların (aynı mantık) ----------

def normalize_background(
    img: np.ndarray,
    gamma: float = 2.7,
    stretch_contrast: bool = True,
    apply_clahe: bool = True,
    clahe_clip_limit: float = 2.0,
    black_thresh: int = 40,
    white_thresh: int = 220,
) -> np.ndarray:
    """Gri alanları beyazlatır, siyahları korur (senin mantık)."""
    g = img.astype(np.uint8)

    # gamma
    g = np.clip((g / 255.0) ** (1.0 / gamma) * 255.0, 0, 255).astype(np.uint8)

    if stretch_contrast:
        p2, p98 = np.percentile(g, (2, 98))
        if p98 > p2:
            g = cv2.normalize(g, None, 0, 255, cv2.NORM_MINMAX)
            g = np.clip((g - p2) * 255.0 / (p98 - p2 + 1e-5), 0, 255).astype(np.uint8)

    if apply_clahe:
        clahe = cv2.createCLAHE(clipLimit=clahe_clip_limit, tileGridSize=(8, 8))
        g = clahe.apply(g)

    # siyah/beyaz eşikleri
    res = g.copy()
    res[g <= black_thresh] = 0
    res[g >= white_thresh] = 255
    mid = (g > black_thresh) & (g < white_thresh)
    pivot = (black_thresh + white_thresh) // 2
    res[mid] = np.where(g[mid] < pivot, 0, 255).astype(np.uint8)
    return res


def unsharp_mask(image: np.ndarray, sigma: float = 1.0, amount: float = 0.5, threshold: int = 0) -> np.ndarray:
    """Yumuşak keskinleştirme (senin kullanıma paralel)."""
    blurred = cv2.GaussianBlur(image, (0, 0), sigma)
    sharpened = cv2.addWeighted(image, 1.0 + amount, blurred, -amount, 0)
    if threshold > 0:
        low = np.abs(image.astype(np.int16) - blurred.astype(np.int16)) < threshold
        sharpened = np.where(low, image, sharpened).astype(np.uint8)
    return sharpened


def build_foreground_mask(gray_img: np.ndarray, bottom_strip: int = 10) -> np.ndarray:
    """
    Foreground maskesi (senin fonksiyonla aynı mantık):
    - Gaussian blur (5,5)
    - Otsu (THRESH_BINARY + OTSU)
    - Maskeyi ters çevir (metin/çizgi=255)
    - Alt 10px şerit varsa bastır
    """
    blur = cv2.GaussianBlur(gray_img, (5, 5), 0)
    _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    mask = 255 - thresh  # metin/çizgi beyaz

    h = mask.shape[0]
    strip = mask[h - bottom_strip : h, :]
    if np.count_nonzero(strip) < 0.05 * strip.size:
        mask[h - bottom_strip : h, :] = 0
    return mask


def crop_to_content(image: np.ndarray, mask: np.ndarray, margin: int = 10) -> np.ndarray:
    """Maskeye göre bbox al ve margin ile kırp (senin mantık)."""
    coords = cv2.findNonZero(mask)
    if coords is None:
        return image
    x, y, w, h = cv2.boundingRect(coords)
    H, W = image.shape[:2]
    x0 = max(x - margin, 0); y0 = max(y - margin, 0)
    x1 = min(x + w + margin, W); y1 = min(y + h + margin, H)
    return image[y0:y1, x0:x1]


def normalize_black_white_safely(gray_img: np.ndarray, black_thresh: int = 130, white_thresh: int = 220) -> np.ndarray:
    """
    Siyaha yakın 0, beyaza yakın 255; arada kalanları yakın olduğu tarafa it.
    İnce stroke’ları korur. (Önceki diyalogdakiyle aynı)
    """
    g = gray_img.astype(np.uint8)
    res = g.copy()
    res[g <= black_thresh] = 0
    res[g >= white_thresh] = 255
    mid = (g > black_thresh) & (g < white_thresh)
    pivot = (black_thresh + white_thresh) // 2
    res[mid] = np.where(g[mid] < pivot, 0, 255).astype(np.uint8)
    return res


# ---------- YENİ: PDF yerine sayfa görüntüsü listesi alan boru hattı ----------

def process_page_images_from_cv2_images(
    page_images: List[np.ndarray],
    *,
    # normalize_background parametreleri:
    gamma: float = 2.7,
    stretch_contrast: bool = True,
    apply_clahe: bool = True,
    clahe_clip_limit: float = 2.0,
    black_thresh_norm: int = 40,
    white_thresh_norm: int = 220,
    # black/white normalize:
    bw_black_thresh: int = 130,
    bw_white_thresh: int = 220,
    # keskinleştirme:
    apply_sharpen: bool = True,
    sharpen_sigma: float = 1.0,
    sharpen_amount: float = 0.5,
    sharpen_threshold: int = 0,
    # crop/mask
    margin: int = 10,
    bottom_strip: int = 10,
    # davranış
    display_pages: bool = False,
    debug: bool = False,
) -> List[np.ndarray]:
    """
    Önceden 'read_all_pages_as_cv2_images' + döngüde yaptığın TÜM adımları,
    artık doğrudan BGR/RGBA/grayscale sayfa görüntü listesi üzerinden uygular.
    Skew yok. Çıktı: final sayfa görselleri listesi.
    """
    outputs: List[np.ndarray] = []

    for page_index, img in enumerate(page_images):
        # --- 0) Kanal normalizasyonu (BGR/GRAY/RGBA olasılıkları)
        if img is None or img.size == 0:
            if debug:
                print(f"[WARN] Skipped page {page_index}: empty image")
            continue

        if img.ndim == 3 and img.shape[2] == 4:
            # RGBA → BGR
            img_bgr = cv2.cvtColor(img, cv2.COLOR_RGBA2BGR)
        elif img.ndim == 3 and img.shape[2] == 3:
            img_bgr = img
        else:
            # Grayscale already
            img_bgr = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)

        # --- 1) BGR → GRAY + normalize_background (senin fonksiyonun)
        img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)
        img_gray = normalize_background(
            img_gray,
            gamma=gamma,
            stretch_contrast=stretch_contrast,
            apply_clahe=apply_clahe,
            clahe_clip_limit=clahe_clip_limit,
            black_thresh=black_thresh_norm,
            white_thresh=white_thresh_norm,
        )

        if img_gray is None or img_gray.size == 0:
            if debug:
                print(f"[WARN] Skipped page {page_index}: invalid gray")
            continue

        # --- 2) Siyah-beyaz normalize (senin sonraki adımın)
        img_gray = normalize_black_white_safely(img_gray, black_thresh=bw_black_thresh, white_thresh=bw_white_thresh)

        if debug:
            print(f"[DEBUG] p{page_index} shape={img_gray.shape} min={img_gray.min()} max={img_gray.max()}")

        # --- 3) Foreground mask + crop
        mask = build_foreground_mask(img_gray, bottom_strip=bottom_strip)
        cropped = crop_to_content(img_gray, mask, margin=margin)

        # --- 4) Opsiyonel keskinleştirme (unsharp)
        final = unsharp_mask(cropped, sigma=sharpen_sigma, amount=sharpen_amount, threshold=sharpen_threshold) \
                if apply_sharpen else cropped

        if display_pages:
            import matplotlib.pyplot as plt
            plt.figure(figsize=(10, 7))
            plt.imshow(final, cmap="gray")
            plt.title(f"Page {page_index}")
            plt.axis("off")
            plt.show()

        outputs.append(final)

    return outputs

# Elinde sayfa görüntüleri listesi var (cv2 BGR / RGBA / GRAY olabilir):
# page_images = [img1, img2, ...]   # her biri np.ndarray

processed_pages = process_page_images_from_cv2_images(
    page_images,
    gamma=2.7,
    stretch_contrast=True,
    apply_clahe=True,
    clahe_clip_limit=2.0,
    black_thresh_norm=40,
    white_thresh_norm=220,
    bw_black_thresh=130,
    bw_white_thresh=220,
    apply_sharpen=True,
    sharpen_sigma=1.0,
    sharpen_amount=0.5,
    margin=10,
    bottom_strip=10,
    display_pages=False,
    debug=False,
)

# processed_pages[i] → final gri görüntü (senin boru hattının sonucu)