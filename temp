def _extract_upper(img: np.ndarray, y_top: Optional[int]) -> Optional[np.ndarray]:
    H, W = img.shape[:2]
    # fallback: üst %20 ya da parametrede ne verdiysen
    y_fb = max(1, int(round(H * fallback_top_ratio)))

    # tablo tespit edildiyse onu kullan; değilse fallback
    y_use = y_fb if (y_top is None or y_top < 60) else y_top
    y_use = max(y_use, min_upper_px)                 # en az şu kadar olsun

    up = img[:y_use, :]

    # Güvenlik: kırpılan alanın ALT %10'unda ızgara (siyah piksel) yoğunluğu yüksekse,
    # kademeli olarak 10px geri çek.
    try:
        roi_h = max(4, int(0.10 * up.shape[0]))
        tail = up[-roi_h:, :]
        g = cv2.cvtColor(tail, cv2.COLOR_BGR2GRAY) if tail.ndim==3 else tail
        _, bw = cv2.threshold(g, 0, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
        density = float(np.count_nonzero(bw)) / (bw.size + 1e-6)
        retreat = 0
        while density > grid_density_limit and (y_use - retreat) > min_upper_px+10:
            retreat += 10
            tail = up[-(roi_h+retreat):-retreat if retreat>0 else None, :]
            g = cv2.cvtColor(tail, cv2.COLOR_BGR2GRAY) if tail.ndim==3 else tail
            _, bw = cv2.threshold(g, 0, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
            density = float(np.count_nonzero(bw)) / (bw.size + 1e-6)
        if retreat > 0:
            y_use = max(min_upper_px, y_use - retreat)
            up = img[:y_use, :]
    except Exception:
        pass

    if debug and show_fig and up is not None and up.size:
        try:
            import matplotlib.pyplot as plt
            mode = "fallback%{}".format(int(fallback_top_ratio*100)) if (y_top is None or y_top < 60) else "table-top"
            plt.figure(figsize=(9,3)); plt.imshow(cv2.cvtColor(up, cv2.COLOR_BGR2RGB))
            plt.title(f"Upper crop (0:{y_use}) | mode={mode}")
            plt.axis("off"); plt.show()
        except: pass

    return up if (up is not None and up.size and up.shape[0] >= min_upper_px) else None