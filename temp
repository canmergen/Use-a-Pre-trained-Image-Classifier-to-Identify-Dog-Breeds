def _find_company(lines):
    """
    Tipi yakala -> eşleşmeden geriye 'window' kadar tarayıp şirket adını çıkar.
    Çok satırlı / tek satır / A.Ş’NİN / LTD. ŞTİ.’NİN / Ş İ R K E T toleranslı.
    Dönüş: (company_name | None, canonical_type | None)
    """
    import re, unicodedata

    # ---- inline utils
    def upper_tr(s: str) -> str:
        mp = {"i":"İ","ı":"I","ş":"Ş","ğ":"Ğ","ü":"Ü","ö":"Ö","ç":"Ç"}
        return "".join(mp.get(ch, ch.upper()) for ch in s or "")

    def norm(s: str) -> str:
        s = unicodedata.normalize("NFKC", s or "")
        s = s.replace("\u200b"," ").replace("\xa0"," ")
        return re.sub(r"\s+", " ", s).strip()

    def spaced(tok: str) -> str:
        return r"\s*".join(re.escape(ch) for ch in tok if not ch.isspace())

    # ---- tip (kısaltma + ek) desenleri
    GEN = r"(?:\s*[’'`´\"“”]?\s*(?:NIN|NİN|NUN|NÜN|IN|İN|UN|ÜN))?"
    AS   = r"(?:A\.?\s*Ş|A\.?\s*S|AŞ|AS)"+GEN
    ANON = r"ANON[İI]M\s+"+spaced("ŞİRKET")+GEN
    LTD  = r"(?:LTD\s*\.?\s*ŞT[İI]|LTD\s*\.?\s*ST[İI]|L[İI]M[İI]TED\s+"+spaced("ŞİRKET")+r")"+GEN
    SIRK = spaced("ŞİRKET")+GEN
    HOLD = r"HOLD[İI]NG"; KOOP=r"KOOPERAT[İI]F"
    KOL  = r"KOLEKT[İI]F\s+"+SIRK; ADKOM=r"AD[İI]\s+KOMAND[İI]T\s+"+SIRK
    SPBK = r"SERMAYES[İI]\s+PAYLARA\s+BÖLÜNMÜŞ\s+KOMAND[İI]T\s+"+SIRK
    KOM  = r"KOMAND[İI]T\s+"+SIRK; VAK=r"VAKF[Iİ]|VAKIF"; DER=r"DERNEK"

    TYPE_CORE = rf"(?:{AS}|{ANON}|{LTD}|{KOL}|{ADKOM}|{SPBK}|{KOM}|{HOLD}|{KOOP}|{VAK}|{DER})"
    TYPE_RE = re.compile(TYPE_CORE, re.IGNORECASE)

    # Kanonik tipe çevir (tek yerde)
    def canon_type(raw: str | None) -> str | None:
        if not raw: return None
        U = norm(raw).upper()
        U2 = re.sub(r"[\s\.\-_/’'`´]+", "", U.replace("İ","I").replace("Ş","S").replace("Ğ","G").replace("Ü","U").replace("Ö","O").replace("Ç","C"))
        if re.search(r"(AS|AŞ|ANONIMSIRKET)", U2): return "ANONİM ŞİRKETİ"
        if re.search(r"(LTDSTI|LIMITEDSIRKET)", U2): return "LİMİTED ŞİRKETİ"
        if "HOLDING" in U2: return "HOLDİNG"
        if "KOOPERATIF" in U2: return "KOOPERATİF"
        if re.search(r"KOLEKTIF.*SIRKET", U2): return "KOLEKTİF ŞİRKET"
        if re.search(r"ADIKOMANDIT.*SIRKET", U2): return "ADİ KOMANDİT ŞİRKET"
        if re.search(r"SERMAYESIPAYLARABOLUNMUSKOMANDIT.*SIRKET", U2): return "SERMAYESİ PAYLARA BÖLÜNMÜŞ KOMANDİT ŞİRKET"
        if re.search(r"KOMANDIT.*SIRKET", U2): return "KOMANDİT ŞİRKET"
        if "VAKIF" in U2: return "VAKIF"
        if "DERNEK" in U2: return "DERNEK"
        return None

    # ---- “backscan” ile ad çıkarımı
    STOPTAIL = {"AN","VE","TIC","TİC","SAN","VE.","TIC.","TİC.","SAN."}
    STOPWORDS = {
        "GENEL","KURUL","TOPLANTISINDA","HAZIR","BULUNANLAR","LİSTESİ","GÜNDEM","TARİHLİ",
        "OLAĞAN","OLAĞANÜSTÜ","YILLIK","TUTANAK","SAYIN","ŞAHİBİNİN","SAHİBİNİN"
    }

    def backscan_name(text: str, at: int, window: int = 200) -> str:
        """
        'at' indexindeki tip eşleşmesinden geriye bakarak adı çıkar.
        Büyük harf ağırlıklı tokenları, rakam/.-/& içerenleri kabul eder.
        """
        left = text[max(0, at-window):at]
        # aşırı noktalama/boşluk normalize
        left = re.sub(r"[^\w\s\.\-\/&’'ÇĞİÖŞÜçğıöşü]", " ", left)
        left = re.sub(r"\s+", " ", left).strip(" ,.-:;’'")
        if not left:
            return ""

        toks = left.split()
        # sondan başa: “SAN/VE/TİC” gibi stop-tail gelirse o kelimeyi at
        while toks and toks[-1].upper() in STOPTAIL:
            toks.pop()
        # Baştan gereksiz kelimeleri temizle (liste geniş)
        out = []
        for t in toks:
            up = t.upper()
            if up in STOPWORDS:
                continue
            out.append(t)
        name = " ".join(out).strip(" ,.-:;’'")
        return name

    # ---- ana akış
    src = norm(" ".join([ln for ln in (lines or []) if isinstance(ln, str)])).strip()
    if not src:
        return None, None

    matches = list(TYPE_RE.finditer(src))
    if not matches:
        return None, None

    m = matches[-1]  # son tip demiri
    name = backscan_name(src, m.start(), window=220)
    ctype = canon_type(m.group(0))

    # Çok kısaysa, pencereyi büyüt ve tekrar dene
    if len(name) < 6:
        name = backscan_name(src, m.start(), window=320)

    # Hâlâ zayıfsa None bırakma; en az 1 kelime + 3 harf şartını kontrol et
    if sum(ch.isalpha() for ch in name) < 3 or len(name.split()) == 0:
        return None, ctype

    return upper_tr(name), ctype