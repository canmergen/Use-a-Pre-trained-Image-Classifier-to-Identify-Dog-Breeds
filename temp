import re, unicodedata
from typing import Tuple, Optional

def extract_company_from_text(
    text: str,
    *,
    left_min: int = 6,      # adın min. karakteri
    left_max1: int = 220,   # ilk tarama penceresi
    left_max2: int = 400    # ikinci (geniş) pencere
) -> Tuple[Optional[str], Optional[str]]:
    """
    OCR üst-bant metninden şirket adını ve türünü çıkarır.
    Dönüş: (ŞİRKET_ADI | None, KANONİK_TİP | None)
    """

    if not isinstance(text, str) or not text.strip():
        return None, None

    # --- inline helpers (tek fonksiyon içinde) --------------------------------
    def upper_tr(s: str) -> str:
        mp = {"i":"İ","ı":"I","ş":"Ş","ğ":"Ğ","ü":"Ü","ö":"Ö","ç":"Ç"}
        return "".join(mp.get(ch, ch.upper()) for ch in s or "")

    def norm(s: str) -> str:
        s = unicodedata.normalize("NFKC", s or "")
        s = s.replace("\u200b"," ").replace("\xa0"," ")
        s = re.sub(r"\s+", " ", s)
        return s.strip()

    def spaced(tok: str) -> str:
        # "ŞİRKET" -> "Ş\s*İ\s*R\s*K\s*E\s*T"
        return r"\s*".join(re.escape(ch) for ch in tok if not ch.isspace())

    def canon_type(raw: str | None) -> Optional[str]:
        if not raw: return None
        U = norm(raw).upper()
        U2 = re.sub(r"[\s\.\-_/’'`´]+", "", U.replace("İ","I").replace("Ş","S").replace("Ğ","G")
                                           .replace("Ü","U").replace("Ö","O").replace("Ç","C"))
        if re.search(r"(AS|AŞ|ANONIMSIRKET)", U2): return "ANONİM ŞİRKETİ"
        if re.search(r"(LTDSTI|LIMITEDSIRKET)", U2): return "LİMİTED ŞİRKETİ"
        if "HOLDING" in U2: return "HOLDİNG"
        if "KOOPERATIF" in U2: return "KOOPERATİF"
        if re.search(r"KOLEKTIF.*SIRKET", U2): return "KOLEKTİF ŞİRKET"
        if re.search(r"ADIKOMANDIT.*SIRKET", U2): return "ADİ KOMANDİT ŞİRKET"
        if re.search(r"SERMAYESIPAYLARABOLUNMUSKOMANDIT.*SIRKET", U2): return "SERMAYESİ PAYLARA BÖLÜNMÜŞ KOMANDİT ŞİRKET"
        if re.search(r"KOMANDIT.*SIRKET", U2): return "KOMANDİT ŞİRKET"
        if "VAKIF" in U2: return "VAKIF"
        if "DERNEK" in U2: return "DERNEK"
        return None

    def clean_name(s: str) -> str:
        # ticari karakterleri koru; fazla noktalama/boşlukları düzelt
        s = re.sub(r"[^\w\s\.\-\/&’'ÇĞİÖŞÜçğıöşü]", " ", s)
        s = re.sub(r"\s+", " ", s).strip(" ,.-:;’'")
        # sondaki kuyrukları (SAN/TİC/VE) at
        tail = re.sub(r".*\s", "", s).upper()
        if tail in {"AN","VE","TIC","TİC","SAN","VE.","TIC.","TİC.","SAN."}:
            s = re.sub(r"\s+\S+$", "", s).strip(" ,.-:;’'")
        return s

    # --- tip desenleri (kısaltma + ek toleranslı) -----------------------------
    GEN = r"(?:\s*[’'`´\"“”]?\s*(?:NIN|NİN|NUN|NÜN|IN|İN|UN|ÜN))?"
    AS   = r"(?:A\.?\s*Ş|A\.?\s*S|AŞ|AS)"+GEN
    ANON = r"ANON[İI]M\s+"+spaced("ŞİRKET")+GEN
    LTD  = r"(?:LTD\s*\.?\s*ŞT[İI]|LTD\s*\.?\s*ST[İI]|L[İI]M[İI]TED\s+"+spaced("ŞİRKET")+r")"+GEN
    SIRK = spaced("ŞİRKET")+GEN
    HOLD = r"HOLD[İI]NG"; KOOP=r"KOOPERAT[İI]F"
    KOL  = r"KOLEKT[İI]F\s+"+SIRK; ADKOM=r"AD[İI]\s+KOMAND[İI]T\s+"+SIRK
    SPBK = r"SERMAYES[İI]\s+PAYLARA\s+BÖLÜNMÜŞ\s+KOMAND[İI]T\s+"+SIRK
    KOM  = r"KOMAND[İI]T\s+"+SIRK; VAK=r"VAKF[Iİ]|VAKIF"; DER=r"DERNEK"
    TYPE_CORE = rf"(?:{AS}|{ANON}|{LTD}|{KOL}|{ADKOM}|{SPBK}|{KOM}|{HOLD}|{KOOP}|{VAK}|{DER})"
    TYPE_RE = re.compile(TYPE_CORE, re.IGNORECASE)

    T = norm(text)

    # 1) tüm metinde son tipi bul
    mlist = list(TYPE_RE.finditer(T))
    if not mlist:
        return None, None
    m = mlist[-1]
    ctype = canon_type(m.group(0))

    # 2) tipten SOLA doğru geri tarama (önce dar, sonra geniş pencere)
    def backscan(window: int) -> Optional[str]:
        left = T[max(0, m.start()-window):m.start()]
        left = clean_name(left)
        return left if len(left) >= left_min else None

    name = backscan(left_max1) or backscan(left_max2)
    if not name:
        return None, ctype

    return upper_tr(name), ctype