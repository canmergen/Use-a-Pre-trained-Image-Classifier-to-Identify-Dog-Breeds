def find_best_sermaye_box(detected_boxes, ocr_texts, *, 
                          thr=0.78, thr_partial=0.70, 
                          y_band_ratio=0.55, max_concat=2, dbg=False):
    """
    Girdi:
      detected_boxes : [(x,y,w,h), Box-like, ...]  # indis = lokasyon
      ocr_texts      : [str, ...]                  # indis = metin
    Çıktı:
      (x, y, w, h, text, score)  # en iyi tek 'sermaye' başlık penceresi
      Hiç kutu yoksa None
    """

    # ---- küçük yardımcılar (class/dataclass yok) ----
    import re, unicodedata
    from difflib import SequenceMatcher

    def _to_xywh(b):
        if isinstance(b, (tuple, list)) and len(b) >= 4:
            return int(b[0]), int(b[1]), int(b[2]), int(b[3])
        # obj.x,y,w,h destekle
        for k in ("x","y","w","h"):
            if not hasattr(b, k):
                raise TypeError(f"Unsupported box type: {type(b)}")
        return int(b.x), int(b.y), int(b.w), int(b.h)

    def _normalize(s: str) -> str:
        s = (s or "")
        s = unicodedata.normalize("NFKD", s)
        s = s.replace("İ","I").replace("ı","i")
        s = "".join(ch for ch in s if not unicodedata.combining(ch))
        s = s.upper()
        s = re.sub(r"[^\w%₺ĞÜŞİÖÇ\s]", " ", s)
        s = re.sub(r"\s+", " ", s).strip()
        return s

    def _ratio(a: str, b: str) -> float:
        return SequenceMatcher(None, a, b).ratio()

    def _xyxy(x,y,w,h):
        return x, y, x+w, y+h

    def _merge_boxes(boxes):
        xs1, ys1, xs2, ys2 = [], [], [], []
        for (x,y,w,h) in boxes:
            X1,Y1,X2,Y2 = _xyxy(x,y,w,h)
            xs1.append(X1); ys1.append(Y1); xs2.append(X2); ys2.append(Y2)
        x1, y1 = min(xs1), min(ys1)
        x2, y2 = max(xs2), max(ys2)
        return x1, y1, x2-x1, y2-y1

    # ---- hedef pattern seti ----
    patterns = [
        "Şirketin sermayesi ve payların toplam itibari değeri",
        "Şirketin sermayesi",
        "Sermaye",
        "Sermayesi",
        "Sermaye ve payların toplam itibari değeri",
        "SERMAYE & TUTAR",
        "SERMAYE TUTARI",
    ]
    patterns_n = [_normalize(p) for p in patterns]

    # ---- indis bazlı eşleme (lokasyon <-> metin) ----
    B = [ _to_xywh(b) for b in detected_boxes ]
    T = [ str(t or "") for t in ocr_texts ]
    N = min(len(B), len(T))
    if N == 0:
        return None

    # ---- satır gruplama (yaklaşık y-bandı) ----
    mean_h = max(1, sum(B[i][3] for i in range(N)) // max(1, N))
    band    = max(8, int(mean_h * y_band_ratio))  # min 8 px

    def _y_center(xywh): 
        return xywh[1] + xywh[3]//2

    # key = y-merkez // band
    lines = {}
    for i in range(N):
        key = _y_center(B[i]) // band
        lines.setdefault(key, []).append(i)
    for key in lines:
        lines[key].sort(key=lambda i: B[i][0])  # soldan sağa

    # ---- satır içinde pencere tarama ve skor hesap ----
    best = None  # (score, (x,y,w,h), text, (i_start,i_end))
    for key, idxs in lines.items():
        line_txt_norm = " ".join(_normalize(T[i]) for i in idxs if T[i])
        hint = "SERMAY" in line_txt_norm

        for pos, i in enumerate(idxs):
            for k in range(0, max_concat+1):
                j = min(len(idxs)-1, pos+k)
                win = idxs[pos:j+1]
                # metni sırayla birleştir
                raw_txt = " ".join(T[t] for t in win if T[t])
                norm_txt = _normalize(raw_txt)
                if not norm_txt:
                    continue

                # pattern’lara karşı en iyi skor
                score = max(_ratio(norm_txt, pat) for pat in patterns_n)
                # kısa pencere pattern içinde tam geçiyorsa min bonus
                if any(norm_txt in pat for pat in patterns_n):
                    score = min(1.0, score + 0.05)

                if dbg and k == 0:
                    print(f"[SCAN] i={i} score={score:.2f} txt='{norm_txt[:60]}'")

                # en iyiyi güncelle
                if (best is None) or (score > best[0]):
                    x,y,w,h = _merge_boxes([B[t] for t in win])
                    best = (score, (x,y,w,h), raw_txt.strip(), (i, j))

    if best is None:
        return None

    score, (x,y,w,h), text, (i,j) = best
    # eşik altı olsa bile en iyi sonucu döndürüyoruz;
    # ama istersen burada zorunlu eşik uygula:
    # pass_thr = thr_partial if "SERMAY" in _normalize(text) else thr
    # if score < pass_thr: return None

    if dbg:
        print(f"[BEST] score={score:.2f} range=({i}->{j}) box=({x},{y},{w},{h}) txt='{_normalize(text)[:80]}'")

    return (x, y, w, h, text, score)