# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Any, Callable, Dict, List, Optional
import re, difflib
import numpy as np

def classify_hazirun_single(
    doc_res: Dict[str, Any],
    *,
    ocr_text_fn: Callable[[np.ndarray], str],   # BGR np.ndarray -> str
    must_keywords: Optional[List[str]] = None,
    aux_keywords: Optional[List[str]]  = None,
    fuzzy_min_ratio: float = 0.85,
    min_aux_required: int = 2,
    debug: bool = False
) -> Dict[str, Any]:
    """
    Tek fonksiyon: OCR ile sayfa sayfa kontrol eder.
    En az 1 sayfa hazirun ise belge HAZIRUNDUR. Değilse HAZIRUN DEĞİLDİR.
    """

    # --- helpers ---
    def _try_ratio():
        try:
            from rapidfuzz import fuzz
            return lambda a,b: float(fuzz.partial_ratio(a, b)) / 100.0
        except Exception:
            return lambda a,b: difflib.SequenceMatcher(None, a, b).ratio()
    _ratio = _try_ratio()

    def _tr_lower(s: str) -> str:
        return (s or "").replace("I","ı").replace("İ","i").lower()

    def _normalize_text(s: str) -> str:
        t = _tr_lower(s)
        t = re.sub(r"[_–—\-•・·]+", " ", t)
        t = re.sub(r"[^\w\s%./]", " ", t, flags=re.UNICODE)
        t = re.sub(r"\s+", " ", t).strip()
        return t

    # --- defaults ---
    if must_keywords is None:
        must_keywords = ["hazır bulunan", "hazirun", "hazırun", "genel kurul", "toplantı"]
    if aux_keywords is None:
        aux_keywords  = ["pay", "sermaye", "imza", "gündem", "ortak", "liste", "vekil", "temsilci", "oran", "tutar"]

    images: List[np.ndarray] = list(doc_res.get("images", []))
    metas:  List[Dict[str, Any]] = list(doc_res.get("metas", []))
    n = len(images)

    hazirun_pages: List[Dict[str, Any]] = []
    non_hazirun_pages: List[Dict[str, Any]] = []
    first_match_index: Optional[int] = None

    for i in range(n):
        img = images[i]

        # OCR
        try:
            text_raw = ocr_text_fn(img) or ""
        except Exception as e:
            text_raw = ""
            non_hazirun_pages.append({
                "index": i,
                "reason": f"OCR hata: {e}",
                "must_hits": 0,
                "aux_score": 0,
                "ocr_preview": "" if not debug else ""
            })
            continue

        text = _normalize_text(text_raw)

        # MUST kontrolü
        must_hits = sum(
            1 for kw in must_keywords
            if kw and (
                _tr_lower(kw) in text or
                any(tok.startswith(_tr_lower(kw)) for tok in text.split()) or
                _ratio(_tr_lower(kw), text) >= fuzzy_min_ratio
            )
        )

        # AUX kontrolü
        aux_score = sum(
            1 for kw in aux_keywords
            if kw and (
                _tr_lower(kw) in text or
                any(tok.startswith(_tr_lower(kw)) for tok in text.split()) or
                _ratio(_tr_lower(kw), text) >= fuzzy_min_ratio
            )
        )

        # Karar
        is_hazirun = (must_hits >= 1) and (aux_score >= min_aux_required)
        page_score = 2*must_hits + aux_score

        if is_hazirun:
            if first_match_index is None:
                first_match_index = i
            hazirun_pages.append({
                "index": i,
                "image": images[i],
                "meta": metas[i] if i < len(metas) else {},
                "must_hits": must_hits,
                "aux_score": aux_score,
                "page_score": page_score
            })
        else:
            row = {
                "index": i,
                "reason": "Zayıf kanıt (must<1 veya aux<min)",
                "must_hits": must_hits,
                "aux_score": aux_score
            }
            if debug:
                row["ocr_preview"] = text[:300]
            non_hazirun_pages.append(row)

    # Flag
    flag = "HAZIRUNDUR" if hazirun_pages else "HAZIRUN DEĞİLDİR"

    return {
        "flag": flag,
        "first_match_index": first_match_index,
        "hazirun_pages": hazirun_pages,
        "non_hazirun_pages": non_hazirun_pages,
        "page_count": n
    }