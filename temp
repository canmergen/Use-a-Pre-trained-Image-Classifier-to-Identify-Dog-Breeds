import cv2, numpy as np
import matplotlib.pyplot as plt
from typing import Union, Sequence

def clean_doc_images_locationwise(
    doc_images: Union[np.ndarray, Sequence[np.ndarray]],
    *,
    return_gray: bool = True,
    debug: bool = False
):
    """
    Softer background cleaner for OCR.
    - Removes gray noise & scanner shadows without destroying text.
    - Accepts one image or list of images.
    - Returns same type (single img or list).
    """

    # ---- helpers ----
    def _ensure_list(x):
        if isinstance(x, np.ndarray):
            return [x], True
        return list(x), False

    def _to_gray(img):
        if img.ndim == 3:
            return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        return img.copy()

    def _soft_clean(gray):
        # Normalize lighting
        norm = cv2.normalize(gray, None, 0, 255, cv2.NORM_MINMAX)
        # Slight blur to smooth small dots
        blur = cv2.GaussianBlur(norm, (3,3), 0)
        # Estimate background by heavy blur (no morphology)
        bg = cv2.GaussianBlur(blur, (55,55), 0)
        diff = cv2.subtract(bg, blur)
        diff = cv2.normalize(diff, None, 0, 255, cv2.NORM_MINMAX)
        # Blend with original to preserve text
        combined = cv2.addWeighted(gray, 0.75, diff, 0.25, 0)
        # Gentle threshold â€” preserves thin strokes
        _, th = cv2.threshold(combined, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
        return th

    # ---- main ----
    imgs, was_single = _ensure_list(doc_images)
    outs = []

    for i, img in enumerate(imgs):
        gray = _to_gray(img)
        cleaned = _soft_clean(gray)

        if debug:
            plt.figure(figsize=(12,5))
            plt.subplot(1,2,1); plt.imshow(gray, cmap='gray'); plt.title(f'Before (page {i})'); plt.axis('off')
            plt.subplot(1,2,2); plt.imshow(cleaned, cmap='gray'); plt.title(f'After (page {i})'); plt.axis('off')
            plt.show()

        if return_gray:
            outs.append(cleaned)
        else:
            outs.append(cv2.cvtColor(cleaned, cv2.COLOR_GRAY2BGR))

    return outs[0] if was_single else outs