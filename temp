import cv2
import numpy as np
import fitz  # PyMuPDF
import matplotlib.pyplot as plt

def unsharp_mask(img, blur_kernel=(5, 5), amount=1.5):
    blurred = cv2.GaussianBlur(img, blur_kernel, 0)
    return cv2.addWeighted(img, 1 + amount, blurred, -amount, 0)

def build_foreground_mask(img_gray, alpha1=6, beta=45, bg_blur_ksize=51, denoise_h=10, min_component_area=120):
    den = cv2.GaussianBlur(img_gray, (5, 5), 0)
    bg = cv2.medianBlur(den, bg_blur_ksize)
    bg = cv2.divide(den, bg, scale=255)
    norm = cv2.convertScaleAbs(bg, alpha=alpha1, beta=-beta)
    _, bin_inv = cv2.threshold(norm, 25, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    num, labels, stats, _ = cv2.connectedComponentsWithStats(bin_inv, connectivity=8)
    for i in range(1, num):
        if stats[i, cv2.CC_STAT_AREA] >= min_component_area:
            bin_inv[labels == i] = 255
    mask = cv2.morphologyEx(bin_inv, cv2.MORPH_CLOSE, cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3)), iterations=1)
    return mask

def crop_to_content(img_gray, mask=None, padding=8):
    if mask is None:
        coords = cv2.findNonZero(img_gray)
    else:
        coords = cv2.findNonZero(mask)
    if coords is None:
        return img_gray
    x, y, w, h = cv2.boundingRect(coords)
    x = max(0, x - padding)
    y = max(0, y - padding)
    return img_gray[y:y + h + padding, x:x + w + padding]

def read_all_pages_as_cv2_images(pdf_path, dpi=400, to_gray=True, apply_sharpen=True,
                                 sharpening_amount=1.5, display=False, display_page=0):
    doc = fitz.open(pdf_path)
    images = []
    for page_index in range(len(doc)):
        page = doc[page_index]
        pix = page.get_pixmap(dpi=dpi)
        img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.height, pix.width, pix.n)
        img = cv2.cvtColor(img, cv2.COLOR_RGBA2BGR) if pix.n == 4 else cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

        if to_gray:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            mask = build_foreground_mask(img)
            img = crop_to_content(img, mask, padding=10)

        if apply_sharpen and to_gray:
            img = unsharp_mask(img, amount=sharpening_amount)

        images.append(img)

        if display and len(images) > display_page:
            plt.figure(figsize=(10, 10))
            plt.imshow(images[display_page], cmap='gray' if to_gray else None)
            plt.title(f"Sayfa {display_page}")
            plt.axis("off")
            plt.tight_layout()
            plt.show()

    return images