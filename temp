# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Any, Callable, Dict, List, Optional
import re, difflib
import numpy as np

def classify_hazirun_single(
    doc_res: Dict[str, Any],
    *,
    ocr_text_fn: Callable[[np.ndarray], str],   # BGR np.ndarray -> str
    must_keywords: Optional[List[str]] = None,
    aux_keywords: Optional[List[str]]  = None,
    fuzzy_min_ratio: float = 0.85,    # 0..1
    min_aux_required: int = 2,
    debug: bool = False
) -> Dict[str, Any]:
    """
    Tek fonksiyon: OCR ile sayfa sayfa kontrol eder.
    Kural: En az bir sayfa 'hazirun' ise belge 'HAZIRUNDUR'. Değilse 'HAZIRUN DEĞİLDİR'.
    Çıktı sadece 'hazirun' olan sayfaların image+meta'larını içerir; diğerleri gerekçeyle listelenir.

    Return:
    {
      'flag': 'HAZIRUNDUR' | 'HAZIRUN DEĞİLDİR',
      'first_match_index': int | None,
      'hazirun_pages': [ {'index', 'image', 'meta', 'must_hits', 'aux_score', 'page_score'} ],
      'non_hazirun_pages': [ {'index', 'reason', 'must_hits', 'aux_score', ('ocr_preview' if debug)} ],
      'page_count': int
    }
    """
    # --- local helpers (fonksiyon içine gömülü) ---
    def _try_ratio():
        try:
            from rapidfuzz import fuzz
            return lambda a,b: float(fuzz.partial_ratio(a, b)) / 100.0
        except Exception:
            return lambda a,b: difflib.SequenceMatcher(None, a, b).ratio()
    _ratio = _try_ratio()

    def _tr_lower(s: str) -> str:
        return (s or "").replace("I","ı").replace("İ","i").lower()

    def _normalize_text(s: str) -> str:
        t = _tr_lower(s)
        t = re.sub(r"[_–—\-•・·]+", " ", t)
        t = re.sub(r"[^\w\s%./]", " ", t, flags=re.UNICODE)
        t = re.sub(r"\s+", " ", t).strip()
        return t

    # --- defaults ---
    if must_keywords is None:
        must_keywords = ["hazır bulunan", "hazirun", "hazırun", "genel kurul", "toplantı"]
    if aux_keywords is None:
        aux_keywords  = ["pay", "sermaye", "imza", "gündem", "ortak", "liste", "vekil", "temsilci", "oran", "tutar"]

    images: List[np.ndarray] = list(doc_res.get("images", []))
    metas:  List[Dict[str, Any]] = list(doc_res.get("metas", []))
    n = len(images)

    hazirun_pages: List[Dict[str, Any]] = []
    non_hazirun_pages: List[Dict[str, Any]] = []
    first_match_index: Optional[int] = None

    for i in range(n):
        img = images[i]

        # OCR
        try:
            text_raw = ocr_text_fn(img) or ""
        except Exception as e:
            text_raw = ""
            if debug:
                non_hazirun_pages.append({
                    "index": i,
                    "reason": f"OCR hata: {e}",
                    "must_hits": 0,
                    "aux_score": 0,
                    "ocr_preview": ""
                })
            else:
                non_hazirun_pages.append({
                    "index": i,
                    "reason": "OCR okunamadı",
                    "must_hits": 0,
                    "aux_score": 0
                })
            continue

        text = _normalize_text(text_raw)

        # MUST: en az 1 şart
        must_hits = 0
        for kw in must_keywords:
            kw0 = _tr_lower(kw.strip())
            if not kw0:
                continue
            if kw0 in text:
                must_hits += 1; continue
            toks = text.split()
            if any(tok.startswith(kw0) for tok in toks):
                must_hits += 1; continue
            if _ratio(kw0, text) >= fuzzy_min_ratio:
                must_hits += 1; continue

        # AUX: bağlam güçlendirme
        aux_score = 0
        for kw in aux_keywords:
            kw0 = _tr_lower(kw.strip())
            if not kw0:
                continue
            hit = False
            if kw0 in text:
                hit = True
            else:
                toks = text.split()
                if any(tok.startswith(kw0) for tok in toks):
                    hit = True
                elif _ratio(kw0, text) >= fuzzy_min_ratio:
                    hit = True
            if hit:
                aux_score += 1

        # Sayfa kararı
        is_hazirun = (must_hits >= 1) and (aux_score >= min_aux_required)
        page_score = 2*must_hits + 1*aux_score  # raporlama için basit kompozit

        if is_hazirun:
            if first_match_index is None:
                first_match_index = i
            hazirun_pages.append({
                "index": i,
                "image": images[i],
                "meta": metas[i] if i < len(metas) else {},
                "must_hits": int(must_hits),
                "aux_score": int(aux_score),
                "page_score": int(page_score)
            })
        else:
            row = {
                "index": i,
                "reason": "Zayıf kanıt (must<1 veya aux<min)",
                "must_hits": int(must_hits),
                "aux_score": int(aux_score)
            }
            if debug:
                row["ocr_preview"] = text[:300]
            non_hazirun_pages.append(row)

    # Belge bayrağı (en az 1 sayfa hazirunsa toplam HAZIRUNDUR)
    flag = "HAZIRUNDUR" if len(hazirun_pages) > 0 else "HAZIRUN DEĞİLDİR"

    return {
        "flag": flag,
        "first_match_index": first_match_index,
        "hazirun_pages": hazirun_pages,          # sadece hazirun olan sayfalar (image+meta)
        "non_hazirun_pages": non_hazirun_pages,  # hazirun olmayanların indeks+gerekçeleri
        "page_count": n
    }