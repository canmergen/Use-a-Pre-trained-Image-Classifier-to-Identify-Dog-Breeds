# -*- coding: utf-8 -*-
import cv2, json, base64, requests, re, numpy as np, pandas as pd
from typing import Any, List, Tuple

# =========================================================
# 0) BOX NORMALİZASYONU  (TextBox / tuple / dict hepsi destekli)
# =========================================================
def _to_xywh(b: Any) -> Tuple[int,int,int,int] | None:
    """Her tür kutuyu (x,y,w,h)'ye çevirir."""
    # tuple/list/np.array
    if isinstance(b, (tuple, list, np.ndarray)) and len(b) == 4:
        x,y,w,h = [int(round(float(v))) for v in b]
        return (x,y,w,h)
    # obj: x,y,w,h
    for attrs in [("x","y","w","h"), ("left","top","width","height")]:
        if all(hasattr(b, a) for a in attrs):
            x,y,w,h = [int(round(float(getattr(b,a)))) for a in attrs]
            return (x,y,w,h)
    # obj: x0,y0,x1,y1
    for attrs in [("x0","y0","x1","y1"), ("left","top","right","bottom")]:
        if all(hasattr(b, a) for a in attrs):
            x0,y0,x1,y1 = [float(getattr(b,a)) for a in attrs]
            return (int(round(x0)), int(round(y0)), int(round(x1-x0)), int(round(y1-y0)))
    # dict
    if isinstance(b, dict):
        if all(k in b for k in ("x","y","w","h")):
            return (int(b["x"]), int(b["y"]), int(b["w"]), int(b["h"]))
        if all(k in b for k in ("x0","y0","x1","y1")):
            return (int(b["x0"]), int(b["y0"]),
                    int(b["x1"]-b["x0"]), int(b["y1"]-b["y0"]))
    return None

def _normalize_boxes(boxes: List[Any]) -> List[Tuple[int,int,int,int]]:
    out = []
    for i,b in enumerate(boxes):
        nb = _to_xywh(b)
        if nb is None:  # dönüştürülemeyenleri atla
            print(f"[WARN] Box #{i} dönüştürülemedi: {type(b)}")
            continue
        x,y,w,h = nb
        if w>0 and h>0:
            out.append((x,y,w,h))
    return out


# =========================================================
# 1) UZAK OCR (NEW_URL)
# =========================================================
def _ocr_remote_png(img_bgr: np.ndarray, url: str,
                    lang: str="tur", config: str="--psm 6 --oem 1") -> str:
    ok, buf = cv2.imencode(".png", img_bgr)
    if not ok:
        return ""
    img_b64 = base64.b64encode(buf).decode()
    payload = {"image": img_b64, "lang": lang, "config": config}
    try:
        r = requests.post(url, json=payload, timeout=30)
        if r.ok:
            j = json.loads(r.text)
            return (j.get("text") or "").strip()
        return ""
    except Exception:
        return ""

def _ocr_text_from_box_remote(img: np.ndarray, box_xywh: Tuple[int,int,int,int], url: str) -> str:
    x,y,w,h = box_xywh
    roi = img[y:y+h, x:x+w]
    if roi.ndim == 2:
        roi = cv2.cvtColor(roi, cv2.COLOR_GRAY2BGR)
    return _ocr_remote_png(roi, url=url, lang="tur", config="--psm 6 --oem 1")


# =========================================================
# 2) İMZA HEURİSTİĞİ (hızlı ve pratik)
# =========================================================
def _has_signature(img: np.ndarray, box_xywh: Tuple[int,int,int,int],
                   ink_ratio_thr: float=0.012, thinness_max: float=0.45) -> bool:
    """
    - ink_ratio_thr: mürekkep yoğunluğu eşiği (0.008–0.02 aralığında ayarlanır)
    - thinness_max: dairesel mühürleri elemek için daire benzerliği üst sınırı
    """
    x,y,w,h = box_xywh
    roi = img[y:y+h, x:x+w]
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY) if roi.ndim==3 else roi.copy()
    thr = cv2.threshold(cv2.GaussianBlur(gray,(3,3),0), 0, 255,
                        cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)[1]
    ink_ratio = cv2.countNonZero(thr) / max(1, w*h)
    if ink_ratio < ink_ratio_thr:
        return False
    cnts,_ = cv2.findContours(thr, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not cnts:
        return False
    c = max(cnts, key=cv2.contourArea)
    A = cv2.contourArea(c); P = max(1.0, cv2.arcLength(c, True))
    thinness = 4*np.pi*A/(P*P)  # 1'e yakın daire; imza için daha düşük
    return thinness < thinness_max


# =========================================================
# 3) METİN ARAÇLARI
# =========================================================
TL_NUM = re.compile(r"(\d{1,3}(?:\.\d{3})*(?:,\d{2})?|\d+)\s*(TL|₺)?", re.IGNORECASE)

ROLE_ALIASES = {
    "toplanti_baskani":    ["TOPLANTI BAŞKANI","TOPLANTI BASKANI","DİVAN BAŞKANI","DIVAN BASKANI"],
    "tutanak_yazmani":     ["TUTANAK YAZMANI","YAZMAN"],
    "bakanlik_temsilcisi": ["BAKANLIK TEMSİLCİSİ","TİCARET BAKANLIĞI TEMSİLCİSİ","TICARET BAKANLIGI TEMSILCISI"],
    "yk_uyesi":            ["YÖNETİM KURULU ÜYESİ","YONETIM KURULU UYESI","YK ÜYESİ","YK UYESI"],
    "yk_baskani":          ["YÖNETİM KURULU BAŞKANI","YONETIM KURULU BASKANI","YK BAŞKANI","YK BASKANI"],
    "katip":               ["KÂTİP","KATİP","OY TOPLAYICI","OY TOPLAMA MEMURU","OY TOPLAYAN"],
    "divan_baskani":       ["DİVAN BAŞKANI","DIVAN BASKANI"],
}
DROP_WORDS = ["TOPLANTI","BAŞKANI","BASKANI","YÖNETİM","KURULU","ÜYESİ","UYESI","YK",
              "BAKANLIK","TEMSİLCİSİ","TEMSILCISI","KATİP","KÂTİP","YAZMANI","DİVAN","DIVAN",
              "İMZA","IMZA","KAŞE","MÜHÜR","STAMP","ASALATEN","VEKALETEN","HAZIRUN","HAZİRUN"]

def _contains_any(text_u: str, alias_list: List[str]) -> bool:
    t = text_u.upper()
    return any(a in t for a in alias_list)

def _extract_name(text_u: str) -> str | None:
    t = text_u
    for w in DROP_WORDS:
        t = re.sub(rf"\b{w}\b", " ", t, flags=re.IGNORECASE)
    t = re.sub(r"[^A-ZÇĞİÖŞÜa-zçğıöşü\.\-\'\s]", " ", t)
    t = re.sub(r"\s{2,}", " ", t).strip()
    parts = [p for p in t.split() if len(p) >= 2]
    return " ".join(parts[-3:]) if len(parts) >= 2 else None

def _parse_tl(text: str) -> float | None:
    best = None
    for m in TL_NUM.finditer(text):
        raw = m.group(1)
        v = raw.replace(".", "").replace(" ", "").replace(",", ".")
        try:
            val = float(v)
            best = val if (best is None or val > best) else best
        except:
            pass
    return best


# =========================================================
# 4) ALAN ÇIKARIMI ve DF OLUŞTURMA
# =========================================================
def build_bottom_df_remote(lower_img,
                           boxes: List[Any],
                           NEW_URL: str,
                           debug: bool=False) -> pd.DataFrame:
    """
    Girdi:
      - lower_img: tablo alt görseli (BGR veya GRAY)
      - boxes: TextBox veya (x,y,w,h) listesi
      - NEW_URL: uzak OCR endpoint
    Çıktı:
      - bottom_df: tek satırlık DataFrame (istenen alanlar)
    """
    # 1) normalize
    norm_boxes = _normalize_boxes(boxes)
    if debug:
        print(f"[INFO] {len(boxes)} → {len(norm_boxes)} box")
        for i,b in enumerate(norm_boxes): print(i, b)

    # 2) OCR + imza
    texts_u, sigs = [], []
    for i, b in enumerate(norm_boxes):
        txt = _ocr_text_from_box_remote(lower_img, b, NEW_URL).strip()
        tU  = txt.upper()
        sig = _has_signature(lower_img, b)
        if debug:
            print(f"[BOX {i}] sig={int(sig)} | {tU[:160]}")
        texts_u.append(tU); sigs.append(bool(sig))

    # 3) Sermaye
    cap_keys = ["ŞİRKETİN SERMAYESİ","SERMAYESİ VE PAYLARIN TOPLAMI","SERMAYE","TOPLAM İTİBARİ DEĞERİ"]
    idxs = sorted([(sum(k in t for k in cap_keys), i) for i,t in enumerate(texts_u)], reverse=True)
    sermaye = None
    for score,i in idxs[:3]:
        if score == 0: break
        for j in [i-1,i,i+1]:
            if 0 <= j < len(texts_u):
                v = _parse_tl(texts_u[j])
                if v is not None:
                    sermaye = v; break
        if sermaye is not None: break
    if sermaye is None:
        vals = [ _parse_tl(t) for t in texts_u ]
        sermaye = max([v for v in vals if v is not None], default=None)

    # 4) Roller
    out = {
        "sermaye_toplam_tl": sermaye,
        "toplanti_baskani_ad_soyad": None, "toplanti_baskani_imza_var_mi": None,
        "tutanak_yazmani_ad_soyad": None,  "tutanak_yazmani_imza_var_mi": None,
        "bakanlik_temsilcisi_ad_soyad": None, "bakanlik_temsilcisi_imza_var_mi": None,
        "yk_uyesi_ad_soyad": None, "yk_uyesi_imza_var_mi": None,
        "yk_baskani_ad_soyad": None, "yk_baskani_imza_var_mi": None,
        "katip_ad_soyad": None, "katip_imza_var_mi": None,
        "divan_baskani_ad_soyad": None, "divan_baskani_imza_var_mi": None,
    }

    def _set_role(role_key: str, raw_text: str, has_sig: bool):
        name = _extract_name(raw_text) or raw_text
        if role_key == "toplanti_baskani":
            out["toplanti_baskani_ad_soyad"] = name; out["toplanti_baskani_imza_var_mi"] = has_sig
        elif role_key == "tutanak_yazmani":
            out["tutanak_yazmani_ad_soyad"] = name; out["tutanak_yazmani_imza_var_mi"] = has_sig
        elif role_key == "bakanlik_temsilcisi":
            out["bakanlik_temsilcisi_ad_soyad"] = name; out["bakanlik_temsilcisi_imza_var_mi"] = has_sig
        elif role_key == "yk_uyesi":
            out["yk_uyesi_ad_soyad"] = name; out["yk_uyesi_imza_var_mi"] = has_sig
        elif role_key == "yk_baskani":
            out["yk_baskani_ad_soyad"] = name; out["yk_baskani_imza_var_mi"] = has_sig
        elif role_key == "katip":
            out["katip_ad_soyad"] = name; out["katip_imza_var_mi"] = has_sig
        elif role_key == "divan_baskani":
            out["divan_baskani_ad_soyad"] = name; out["divan_baskani_imza_var_mi"] = has_sig

    for i, t in enumerate(texts_u):
        for rk, aliases in ROLE_ALIASES.items():
            if _contains_any(t, aliases):
                _set_role(rk, t, sigs[i])

    # 5) DF
    return pd.DataFrame([{
        "sermaye_toplam_tl":               out["sermaye_toplam_tl"],
        "toplanti_baskani_ad_soyad":       out["toplanti_baskani_ad_soyad"],
        "toplanti_baskani_imza_var_mi":    out["toplanti_baskani_imza_var_mi"],
        "tutanak_yazmani_ad_soyad":        out["tutanak_yazmani_ad_soyad"],
        "tutanak_yazmani_imza_var_mi":     out["tutanak_yazmani_imza_var_mi"],
        "bakanlik_temsilcisi_ad_soyad":    out["bakanlik_temsilcisi_ad_soyad"],
        "bakanlik_temsilcisi_imza_var_mi": out["bakanlik_temsilcisi_imza_var_mi"],
        "yk_uyesi_ad_soyad":               out["yk_uyesi_ad_soyad"],
        "yk_uyesi_imza_var_mi":            out["yk_uyesi_imza_var_mi"],
        "yk_baskani_ad_soyad":             out["yk_baskani_ad_soyad"],
        "yk_baskani_imza_var_mi":          out["yk_baskani_imza_var_mi"],
        "katip_ad_soyad":                  out["katip_ad_soyad"],
        "katip_imza_var_mi":               out["katip_imza_var_mi"],
        "divan_baskani_ad_soyad":          out["divan_baskani_ad_soyad"],
        "divan_baskani_imza_var_mi":       out["divan_baskani_imza_var_mi"],
    }])